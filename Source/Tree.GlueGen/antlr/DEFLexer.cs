//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DEF.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DEFLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, IDENTIFIER=27, WHITESPACE=28, NEWLINE=29, BLOCKCOMMENT=30, 
		LINECOMMENT=31, INTEGERLITERAL=32, DECIMALLITERAL=33, OCTALLITERAL=34, 
		HEXLITERAL=35, BINARYLITERAL=36;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "IDENTIFIER", "WHITESPACE", "NEWLINE", "BLOCKCOMMENT", "LINECOMMENT", 
		"INTEGERLITERAL", "DECIMALLITERAL", "OCTALLITERAL", "HEXLITERAL", "BINARYLITERAL", 
		"OCTALDIGIT", "HEXADECIMALDIGIT", "BINARYDIGIT", "NONDIGIT", "NONZERODIGIT", 
		"DIGIT"
	};


	public DEFLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DEFLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'struct'", "'system'", "'native'", "'managed'", "'('", 
		"')'", "','", "'['", "']'", "'void'", "'bool'", "'char'", "'i8'", "'u8'", 
		"'i16'", "'u16'", "'i32'", "'u32'", "'f32'", "'f64'", "'string'", "'enum'", 
		"'*'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "IDENTIFIER", "WHITESPACE", "NEWLINE", "BLOCKCOMMENT", 
		"LINECOMMENT", "INTEGERLITERAL", "DECIMALLITERAL", "OCTALLITERAL", "HEXLITERAL", 
		"BINARYLITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DEF.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DEFLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,36,308,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,1,
		0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,
		7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
		12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,
		16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
		19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,5,
		26,193,8,26,10,26,12,26,196,9,26,1,27,4,27,199,8,27,11,27,12,27,200,1,
		27,1,27,1,28,1,28,3,28,207,8,28,1,28,3,28,210,8,28,1,28,1,28,1,29,1,29,
		1,29,1,29,5,29,218,8,29,10,29,12,29,221,9,29,1,29,1,29,1,29,1,29,1,29,
		1,30,1,30,1,30,1,30,5,30,232,8,30,10,30,12,30,235,9,30,1,30,1,30,1,31,
		1,31,1,31,1,31,3,31,243,8,31,1,32,1,32,3,32,247,8,32,1,32,5,32,250,8,32,
		10,32,12,32,253,9,32,1,33,1,33,3,33,257,8,33,1,33,5,33,260,8,33,10,33,
		12,33,263,9,33,1,34,1,34,1,34,1,34,3,34,269,8,34,1,34,1,34,3,34,273,8,
		34,1,34,5,34,276,8,34,10,34,12,34,279,9,34,1,35,1,35,1,35,1,35,3,35,285,
		8,35,1,35,1,35,3,35,289,8,35,1,35,5,35,292,8,35,10,35,12,35,295,9,35,1,
		36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,219,0,42,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
		15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
		27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,0,75,0,77,
		0,79,0,81,0,83,0,1,0,8,2,0,9,9,32,32,2,0,10,10,13,13,1,0,48,55,3,0,48,
		57,65,70,97,102,1,0,48,49,3,0,65,90,95,95,97,122,1,0,49,57,1,0,48,57,321,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,89,1,0,0,
		0,7,96,1,0,0,0,9,103,1,0,0,0,11,110,1,0,0,0,13,118,1,0,0,0,15,120,1,0,
		0,0,17,122,1,0,0,0,19,124,1,0,0,0,21,126,1,0,0,0,23,128,1,0,0,0,25,133,
		1,0,0,0,27,138,1,0,0,0,29,143,1,0,0,0,31,146,1,0,0,0,33,149,1,0,0,0,35,
		153,1,0,0,0,37,157,1,0,0,0,39,161,1,0,0,0,41,165,1,0,0,0,43,169,1,0,0,
		0,45,173,1,0,0,0,47,180,1,0,0,0,49,185,1,0,0,0,51,187,1,0,0,0,53,189,1,
		0,0,0,55,198,1,0,0,0,57,209,1,0,0,0,59,213,1,0,0,0,61,227,1,0,0,0,63,242,
		1,0,0,0,65,244,1,0,0,0,67,254,1,0,0,0,69,268,1,0,0,0,71,284,1,0,0,0,73,
		296,1,0,0,0,75,298,1,0,0,0,77,300,1,0,0,0,79,302,1,0,0,0,81,304,1,0,0,
		0,83,306,1,0,0,0,85,86,5,123,0,0,86,2,1,0,0,0,87,88,5,125,0,0,88,4,1,0,
		0,0,89,90,5,115,0,0,90,91,5,116,0,0,91,92,5,114,0,0,92,93,5,117,0,0,93,
		94,5,99,0,0,94,95,5,116,0,0,95,6,1,0,0,0,96,97,5,115,0,0,97,98,5,121,0,
		0,98,99,5,115,0,0,99,100,5,116,0,0,100,101,5,101,0,0,101,102,5,109,0,0,
		102,8,1,0,0,0,103,104,5,110,0,0,104,105,5,97,0,0,105,106,5,116,0,0,106,
		107,5,105,0,0,107,108,5,118,0,0,108,109,5,101,0,0,109,10,1,0,0,0,110,111,
		5,109,0,0,111,112,5,97,0,0,112,113,5,110,0,0,113,114,5,97,0,0,114,115,
		5,103,0,0,115,116,5,101,0,0,116,117,5,100,0,0,117,12,1,0,0,0,118,119,5,
		40,0,0,119,14,1,0,0,0,120,121,5,41,0,0,121,16,1,0,0,0,122,123,5,44,0,0,
		123,18,1,0,0,0,124,125,5,91,0,0,125,20,1,0,0,0,126,127,5,93,0,0,127,22,
		1,0,0,0,128,129,5,118,0,0,129,130,5,111,0,0,130,131,5,105,0,0,131,132,
		5,100,0,0,132,24,1,0,0,0,133,134,5,98,0,0,134,135,5,111,0,0,135,136,5,
		111,0,0,136,137,5,108,0,0,137,26,1,0,0,0,138,139,5,99,0,0,139,140,5,104,
		0,0,140,141,5,97,0,0,141,142,5,114,0,0,142,28,1,0,0,0,143,144,5,105,0,
		0,144,145,5,56,0,0,145,30,1,0,0,0,146,147,5,117,0,0,147,148,5,56,0,0,148,
		32,1,0,0,0,149,150,5,105,0,0,150,151,5,49,0,0,151,152,5,54,0,0,152,34,
		1,0,0,0,153,154,5,117,0,0,154,155,5,49,0,0,155,156,5,54,0,0,156,36,1,0,
		0,0,157,158,5,105,0,0,158,159,5,51,0,0,159,160,5,50,0,0,160,38,1,0,0,0,
		161,162,5,117,0,0,162,163,5,51,0,0,163,164,5,50,0,0,164,40,1,0,0,0,165,
		166,5,102,0,0,166,167,5,51,0,0,167,168,5,50,0,0,168,42,1,0,0,0,169,170,
		5,102,0,0,170,171,5,54,0,0,171,172,5,52,0,0,172,44,1,0,0,0,173,174,5,115,
		0,0,174,175,5,116,0,0,175,176,5,114,0,0,176,177,5,105,0,0,177,178,5,110,
		0,0,178,179,5,103,0,0,179,46,1,0,0,0,180,181,5,101,0,0,181,182,5,110,0,
		0,182,183,5,117,0,0,183,184,5,109,0,0,184,48,1,0,0,0,185,186,5,42,0,0,
		186,50,1,0,0,0,187,188,5,59,0,0,188,52,1,0,0,0,189,194,3,79,39,0,190,193,
		3,79,39,0,191,193,3,83,41,0,192,190,1,0,0,0,192,191,1,0,0,0,193,196,1,
		0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,54,1,0,0,0,196,194,1,0,0,0,197,
		199,7,0,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,
		0,0,0,201,202,1,0,0,0,202,203,6,27,0,0,203,56,1,0,0,0,204,206,5,13,0,0,
		205,207,5,10,0,0,206,205,1,0,0,0,206,207,1,0,0,0,207,210,1,0,0,0,208,210,
		5,10,0,0,209,204,1,0,0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,212,6,28,
		0,0,212,58,1,0,0,0,213,214,5,47,0,0,214,215,5,42,0,0,215,219,1,0,0,0,216,
		218,9,0,0,0,217,216,1,0,0,0,218,221,1,0,0,0,219,220,1,0,0,0,219,217,1,
		0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,223,5,42,0,0,223,224,5,47,0,
		0,224,225,1,0,0,0,225,226,6,29,0,0,226,60,1,0,0,0,227,228,5,47,0,0,228,
		229,5,47,0,0,229,233,1,0,0,0,230,232,8,1,0,0,231,230,1,0,0,0,232,235,1,
		0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,
		236,237,6,30,0,0,237,62,1,0,0,0,238,243,3,65,32,0,239,243,3,67,33,0,240,
		243,3,69,34,0,241,243,3,71,35,0,242,238,1,0,0,0,242,239,1,0,0,0,242,240,
		1,0,0,0,242,241,1,0,0,0,243,64,1,0,0,0,244,251,3,81,40,0,245,247,5,39,
		0,0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,250,3,83,41,0,
		249,246,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,66,
		1,0,0,0,253,251,1,0,0,0,254,261,5,48,0,0,255,257,5,39,0,0,256,255,1,0,
		0,0,256,257,1,0,0,0,257,258,1,0,0,0,258,260,3,73,36,0,259,256,1,0,0,0,
		260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,68,1,0,0,0,263,261,
		1,0,0,0,264,265,5,48,0,0,265,269,5,120,0,0,266,267,5,48,0,0,267,269,5,
		88,0,0,268,264,1,0,0,0,268,266,1,0,0,0,269,270,1,0,0,0,270,277,3,75,37,
		0,271,273,5,39,0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,
		276,3,75,37,0,275,272,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,
		1,0,0,0,278,70,1,0,0,0,279,277,1,0,0,0,280,281,5,48,0,0,281,285,5,98,0,
		0,282,283,5,48,0,0,283,285,5,66,0,0,284,280,1,0,0,0,284,282,1,0,0,0,285,
		286,1,0,0,0,286,293,3,77,38,0,287,289,5,39,0,0,288,287,1,0,0,0,288,289,
		1,0,0,0,289,290,1,0,0,0,290,292,3,77,38,0,291,288,1,0,0,0,292,295,1,0,
		0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,72,1,0,0,0,295,293,1,0,0,0,296,
		297,7,2,0,0,297,74,1,0,0,0,298,299,7,3,0,0,299,76,1,0,0,0,300,301,7,4,
		0,0,301,78,1,0,0,0,302,303,7,5,0,0,303,80,1,0,0,0,304,305,7,6,0,0,305,
		82,1,0,0,0,306,307,7,7,0,0,307,84,1,0,0,0,19,0,192,194,200,206,209,219,
		233,242,246,251,256,261,268,272,277,284,288,293,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
