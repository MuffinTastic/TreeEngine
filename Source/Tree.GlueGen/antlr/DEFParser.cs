//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DEF.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DEFParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, IDENTIFIER=27, WHITESPACE=28, NEWLINE=29, BLOCKCOMMENT=30, 
		LINECOMMENT=31, INTEGERLITERAL=32, DECIMALLITERAL=33, OCTALLITERAL=34, 
		HEXLITERAL=35, BINARYLITERAL=36;
	public const int
		RULE_def = 0, RULE_interopDefinition = 1, RULE_structDefinition = 2, RULE_systemDefinition = 3, 
		RULE_struct = 4, RULE_system = 5, RULE_native = 6, RULE_managed = 7, RULE_variable = 8, 
		RULE_function = 9, RULE_funcArgumentList = 10, RULE_funcArgument = 11, 
		RULE_typeSpecifier = 12, RULE_baseType = 13, RULE_arraySize = 14, RULE_identifier = 15, 
		RULE_integerLiteral = 16, RULE_void = 17, RULE_bool = 18, RULE_char = 19, 
		RULE_i8 = 20, RULE_u8 = 21, RULE_i16 = 22, RULE_u16 = 23, RULE_i32 = 24, 
		RULE_u32 = 25, RULE_f32 = 26, RULE_f64 = 27, RULE_string = 28, RULE_enum = 29, 
		RULE_pointer = 30, RULE_endStatement = 31;
	public static readonly string[] ruleNames = {
		"def", "interopDefinition", "structDefinition", "systemDefinition", "struct", 
		"system", "native", "managed", "variable", "function", "funcArgumentList", 
		"funcArgument", "typeSpecifier", "baseType", "arraySize", "identifier", 
		"integerLiteral", "void", "bool", "char", "i8", "u8", "i16", "u16", "i32", 
		"u32", "f32", "f64", "string", "enum", "pointer", "endStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'struct'", "'system'", "'native'", "'managed'", "'('", 
		"')'", "','", "'['", "']'", "'void'", "'bool'", "'char'", "'i8'", "'u8'", 
		"'i16'", "'u16'", "'i32'", "'u32'", "'f32'", "'f64'", "'string'", "'enum'", 
		"'*'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "IDENTIFIER", "WHITESPACE", "NEWLINE", "BLOCKCOMMENT", 
		"LINECOMMENT", "INTEGERLITERAL", "DECIMALLITERAL", "OCTALLITERAL", "HEXLITERAL", 
		"BINARYLITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DEF.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DEFParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DEFParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DEFParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InteropDefinitionContext[] interopDefinition() {
			return GetRuleContexts<InteropDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InteropDefinitionContext interopDefinition(int i) {
			return GetRuleContext<InteropDefinitionContext>(i);
		}
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitDef(this);
		}
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 0, RULE_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 104L) != 0)) {
				{
				{
				State = 64;
				interopDefinition();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteropDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemDefinitionContext systemDefinition() {
			return GetRuleContext<SystemDefinitionContext>(0);
		}
		public InteropDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interopDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterInteropDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitInteropDefinition(this);
		}
	}

	[RuleVersion(0)]
	public InteropDefinitionContext interopDefinition() {
		InteropDefinitionContext _localctx = new InteropDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_interopDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 70;
				structDefinition();
				}
				break;
			case T__4:
			case T__5:
				{
				State = 71;
				systemDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			@struct();
			State = 75;
			identifier();
			State = 76;
			Match(T__0);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 167768064L) != 0)) {
				{
				{
				State = 77;
				variable();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SystemContext system() {
			return GetRuleContext<SystemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NativeContext native() {
			return GetRuleContext<NativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ManagedContext managed() {
			return GetRuleContext<ManagedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public SystemDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterSystemDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitSystemDefinition(this);
		}
	}

	[RuleVersion(0)]
	public SystemDefinitionContext systemDefinition() {
		SystemDefinitionContext _localctx = new SystemDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_systemDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 85;
				native();
				}
				break;
			case T__5:
				{
				State = 86;
				managed();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 89;
			system();
			State = 90;
			identifier();
			State = 91;
			Match(T__0);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 167768064L) != 0)) {
				{
				{
				State = 92;
				function();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemContext : ParserRuleContext {
		public SystemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_system; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterSystem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitSystem(this);
		}
	}

	[RuleVersion(0)]
	public SystemContext system() {
		SystemContext _localctx = new SystemContext(Context, State);
		EnterRule(_localctx, 10, RULE_system);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeContext : ParserRuleContext {
		public NativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterNative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitNative(this);
		}
	}

	[RuleVersion(0)]
	public NativeContext native() {
		NativeContext _localctx = new NativeContext(Context, State);
		EnterRule(_localctx, 12, RULE_native);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ManagedContext : ParserRuleContext {
		public ManagedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_managed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterManaged(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitManaged(this);
		}
	}

	[RuleVersion(0)]
	public ManagedContext managed() {
		ManagedContext _localctx = new ManagedContext(Context, State);
		EnterRule(_localctx, 14, RULE_managed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndStatementContext endStatement() {
			return GetRuleContext<EndStatementContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			typeSpecifier();
			State = 109;
			identifier();
			State = 110;
			endStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndStatementContext endStatement() {
			return GetRuleContext<EndStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgumentListContext funcArgumentList() {
			return GetRuleContext<FuncArgumentListContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			typeSpecifier();
			State = 113;
			identifier();
			State = 114;
			Match(T__6);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 167768064L) != 0)) {
				{
				State = 115;
				funcArgumentList();
				}
			}

			State = 118;
			Match(T__7);
			State = 119;
			endStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgumentContext[] funcArgument() {
			return GetRuleContexts<FuncArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgumentContext funcArgument(int i) {
			return GetRuleContext<FuncArgumentContext>(i);
		}
		public FuncArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterFuncArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitFuncArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgumentListContext funcArgumentList() {
		FuncArgumentListContext _localctx = new FuncArgumentListContext(Context, State);
		EnterRule(_localctx, 20, RULE_funcArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			funcArgument();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 122;
				Match(T__8);
				State = 123;
				funcArgument();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FuncArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterFuncArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitFuncArgument(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgumentContext funcArgument() {
		FuncArgumentContext _localctx = new FuncArgumentContext(Context, State);
		EnterRule(_localctx, 22, RULE_funcArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			typeSpecifier();
			State = 130;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySizeContext arraySize() {
			return GetRuleContext<ArraySizeContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_typeSpecifier);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				baseType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				baseType();
				State = 134;
				pointer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136;
				baseType();
				State = 137;
				Match(T__9);
				State = 138;
				arraySize();
				State = 139;
				Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VoidContext @void() {
			return GetRuleContext<VoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharContext @char() {
			return GetRuleContext<CharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public I8Context i8() {
			return GetRuleContext<I8Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public U8Context u8() {
			return GetRuleContext<U8Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public I16Context i16() {
			return GetRuleContext<I16Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public U16Context u16() {
			return GetRuleContext<U16Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public I32Context i32() {
			return GetRuleContext<I32Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public U32Context u32() {
			return GetRuleContext<U32Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F32Context f32() {
			return GetRuleContext<F32Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F64Context f64() {
			return GetRuleContext<F64Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_baseType);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__11:
					{
					State = 143;
					@void();
					}
					break;
				case T__12:
					{
					State = 144;
					@bool();
					}
					break;
				case T__13:
					{
					State = 145;
					@char();
					}
					break;
				case T__14:
					{
					State = 146;
					i8();
					}
					break;
				case T__15:
					{
					State = 147;
					u8();
					}
					break;
				case T__16:
					{
					State = 148;
					i16();
					}
					break;
				case T__17:
					{
					State = 149;
					u16();
					}
					break;
				case T__18:
					{
					State = 150;
					i32();
					}
					break;
				case T__19:
					{
					State = 151;
					u32();
					}
					break;
				case T__20:
					{
					State = 152;
					f32();
					}
					break;
				case T__21:
					{
					State = 153;
					f64();
					}
					break;
				case T__22:
					{
					State = 154;
					@string();
					}
					break;
				case T__23:
					{
					State = 155;
					@enum();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArraySizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterArraySize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitArraySize(this);
		}
	}

	[RuleVersion(0)]
	public ArraySizeContext arraySize() {
		ArraySizeContext _localctx = new ArraySizeContext(Context, State);
		EnterRule(_localctx, 28, RULE_arraySize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGERLITERAL:
				{
				State = 161;
				integerLiteral();
				}
				break;
			case IDENTIFIER:
				{
				State = 162;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DEFParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGERLITERAL() { return GetToken(DEFParser.INTEGERLITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(INTEGERLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidContext : ParserRuleContext {
		public VoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_void; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitVoid(this);
		}
	}

	[RuleVersion(0)]
	public VoidContext @void() {
		VoidContext _localctx = new VoidContext(Context, State);
		EnterRule(_localctx, 34, RULE_void);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 36, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharContext : ParserRuleContext {
		public CharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitChar(this);
		}
	}

	[RuleVersion(0)]
	public CharContext @char() {
		CharContext _localctx = new CharContext(Context, State);
		EnterRule(_localctx, 38, RULE_char);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class I8Context : ParserRuleContext {
		public I8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_i8; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterI8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitI8(this);
		}
	}

	[RuleVersion(0)]
	public I8Context i8() {
		I8Context _localctx = new I8Context(Context, State);
		EnterRule(_localctx, 40, RULE_i8);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class U8Context : ParserRuleContext {
		public U8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_u8; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterU8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitU8(this);
		}
	}

	[RuleVersion(0)]
	public U8Context u8() {
		U8Context _localctx = new U8Context(Context, State);
		EnterRule(_localctx, 42, RULE_u8);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class I16Context : ParserRuleContext {
		public I16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_i16; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterI16(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitI16(this);
		}
	}

	[RuleVersion(0)]
	public I16Context i16() {
		I16Context _localctx = new I16Context(Context, State);
		EnterRule(_localctx, 44, RULE_i16);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class U16Context : ParserRuleContext {
		public U16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_u16; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterU16(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitU16(this);
		}
	}

	[RuleVersion(0)]
	public U16Context u16() {
		U16Context _localctx = new U16Context(Context, State);
		EnterRule(_localctx, 46, RULE_u16);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class I32Context : ParserRuleContext {
		public I32Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_i32; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterI32(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitI32(this);
		}
	}

	[RuleVersion(0)]
	public I32Context i32() {
		I32Context _localctx = new I32Context(Context, State);
		EnterRule(_localctx, 48, RULE_i32);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class U32Context : ParserRuleContext {
		public U32Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_u32; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterU32(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitU32(this);
		}
	}

	[RuleVersion(0)]
	public U32Context u32() {
		U32Context _localctx = new U32Context(Context, State);
		EnterRule(_localctx, 50, RULE_u32);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F32Context : ParserRuleContext {
		public F32Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f32; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterF32(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitF32(this);
		}
	}

	[RuleVersion(0)]
	public F32Context f32() {
		F32Context _localctx = new F32Context(Context, State);
		EnterRule(_localctx, 52, RULE_f32);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F64Context : ParserRuleContext {
		public F64Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f64; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterF64(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitF64(this);
		}
	}

	[RuleVersion(0)]
	public F64Context f64() {
		F64Context _localctx = new F64Context(Context, State);
		EnterRule(_localctx, 54, RULE_f64);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 56, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 58, RULE_enum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerContext : ParserRuleContext {
		public PointerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitPointer(this);
		}
	}

	[RuleVersion(0)]
	public PointerContext pointer() {
		PointerContext _localctx = new PointerContext(Context, State);
		EnterRule(_localctx, 60, RULE_pointer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStatementContext : ParserRuleContext {
		public EndStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.EnterEndStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDEFListener typedListener = listener as IDEFListener;
			if (typedListener != null) typedListener.ExitEndStatement(this);
		}
	}

	[RuleVersion(0)]
	public EndStatementContext endStatement() {
		EndStatementContext _localctx = new EndStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_endStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,200,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,1,1,1,
		3,1,73,8,1,1,2,1,2,1,2,1,2,5,2,79,8,2,10,2,12,2,82,9,2,1,2,1,2,1,3,1,3,
		3,3,88,8,3,1,3,1,3,1,3,1,3,5,3,94,8,3,10,3,12,3,97,9,3,1,3,1,3,1,4,1,4,
		1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,117,8,9,1,
		9,1,9,1,9,1,10,1,10,1,10,5,10,125,8,10,10,10,12,10,128,9,10,1,11,1,11,
		1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,142,8,12,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,157,8,13,
		1,13,3,13,160,8,13,1,14,1,14,3,14,164,8,14,1,15,1,15,1,16,1,16,1,17,1,
		17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
		24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,
		31,1,31,0,0,32,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,0,0,190,0,67,1,0,0,0,2,72,1,0,0,0,
		4,74,1,0,0,0,6,87,1,0,0,0,8,100,1,0,0,0,10,102,1,0,0,0,12,104,1,0,0,0,
		14,106,1,0,0,0,16,108,1,0,0,0,18,112,1,0,0,0,20,121,1,0,0,0,22,129,1,0,
		0,0,24,141,1,0,0,0,26,159,1,0,0,0,28,163,1,0,0,0,30,165,1,0,0,0,32,167,
		1,0,0,0,34,169,1,0,0,0,36,171,1,0,0,0,38,173,1,0,0,0,40,175,1,0,0,0,42,
		177,1,0,0,0,44,179,1,0,0,0,46,181,1,0,0,0,48,183,1,0,0,0,50,185,1,0,0,
		0,52,187,1,0,0,0,54,189,1,0,0,0,56,191,1,0,0,0,58,193,1,0,0,0,60,195,1,
		0,0,0,62,197,1,0,0,0,64,66,3,2,1,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,
		0,0,0,67,68,1,0,0,0,68,1,1,0,0,0,69,67,1,0,0,0,70,73,3,4,2,0,71,73,3,6,
		3,0,72,70,1,0,0,0,72,71,1,0,0,0,73,3,1,0,0,0,74,75,3,8,4,0,75,76,3,30,
		15,0,76,80,5,1,0,0,77,79,3,16,8,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,
		0,0,0,80,81,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,5,2,0,0,84,5,1,0,
		0,0,85,88,3,12,6,0,86,88,3,14,7,0,87,85,1,0,0,0,87,86,1,0,0,0,88,89,1,
		0,0,0,89,90,3,10,5,0,90,91,3,30,15,0,91,95,5,1,0,0,92,94,3,18,9,0,93,92,
		1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,95,
		1,0,0,0,98,99,5,2,0,0,99,7,1,0,0,0,100,101,5,3,0,0,101,9,1,0,0,0,102,103,
		5,4,0,0,103,11,1,0,0,0,104,105,5,5,0,0,105,13,1,0,0,0,106,107,5,6,0,0,
		107,15,1,0,0,0,108,109,3,24,12,0,109,110,3,30,15,0,110,111,3,62,31,0,111,
		17,1,0,0,0,112,113,3,24,12,0,113,114,3,30,15,0,114,116,5,7,0,0,115,117,
		3,20,10,0,116,115,1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,0,118,119,5,8,
		0,0,119,120,3,62,31,0,120,19,1,0,0,0,121,126,3,22,11,0,122,123,5,9,0,0,
		123,125,3,22,11,0,124,122,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,
		127,1,0,0,0,127,21,1,0,0,0,128,126,1,0,0,0,129,130,3,24,12,0,130,131,3,
		30,15,0,131,23,1,0,0,0,132,142,3,26,13,0,133,134,3,26,13,0,134,135,3,60,
		30,0,135,142,1,0,0,0,136,137,3,26,13,0,137,138,5,10,0,0,138,139,3,28,14,
		0,139,140,5,11,0,0,140,142,1,0,0,0,141,132,1,0,0,0,141,133,1,0,0,0,141,
		136,1,0,0,0,142,25,1,0,0,0,143,157,3,34,17,0,144,157,3,36,18,0,145,157,
		3,38,19,0,146,157,3,40,20,0,147,157,3,42,21,0,148,157,3,44,22,0,149,157,
		3,46,23,0,150,157,3,48,24,0,151,157,3,50,25,0,152,157,3,52,26,0,153,157,
		3,54,27,0,154,157,3,56,28,0,155,157,3,58,29,0,156,143,1,0,0,0,156,144,
		1,0,0,0,156,145,1,0,0,0,156,146,1,0,0,0,156,147,1,0,0,0,156,148,1,0,0,
		0,156,149,1,0,0,0,156,150,1,0,0,0,156,151,1,0,0,0,156,152,1,0,0,0,156,
		153,1,0,0,0,156,154,1,0,0,0,156,155,1,0,0,0,157,160,1,0,0,0,158,160,3,
		30,15,0,159,156,1,0,0,0,159,158,1,0,0,0,160,27,1,0,0,0,161,164,3,32,16,
		0,162,164,3,30,15,0,163,161,1,0,0,0,163,162,1,0,0,0,164,29,1,0,0,0,165,
		166,5,27,0,0,166,31,1,0,0,0,167,168,5,32,0,0,168,33,1,0,0,0,169,170,5,
		12,0,0,170,35,1,0,0,0,171,172,5,13,0,0,172,37,1,0,0,0,173,174,5,14,0,0,
		174,39,1,0,0,0,175,176,5,15,0,0,176,41,1,0,0,0,177,178,5,16,0,0,178,43,
		1,0,0,0,179,180,5,17,0,0,180,45,1,0,0,0,181,182,5,18,0,0,182,47,1,0,0,
		0,183,184,5,19,0,0,184,49,1,0,0,0,185,186,5,20,0,0,186,51,1,0,0,0,187,
		188,5,21,0,0,188,53,1,0,0,0,189,190,5,22,0,0,190,55,1,0,0,0,191,192,5,
		23,0,0,192,57,1,0,0,0,193,194,5,24,0,0,194,59,1,0,0,0,195,196,5,25,0,0,
		196,61,1,0,0,0,197,198,5,26,0,0,198,63,1,0,0,0,11,67,72,80,87,95,116,126,
		141,156,159,163
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
